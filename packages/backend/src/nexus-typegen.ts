/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as BackingScalars from "./scalars"
import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  JobsDataInput: { // input type
    biddingType: NexusGenEnums['BiddingType']; // BiddingType!
    body: string; // String!
    creatorID: string; // String!
    link?: string | null; // String
    price: number; // Float!
    title: string; // String!
  }
  UsersProfileInput: { // input type
    email?: string | null; // String
    name?: string | null; // String
  }
}

export interface NexusGenEnums {
  ApplicantState: "ACCEPTED" | "PROGRESS" | "REJECTED"
  BiddingType: "OPEN_BID" | "OPEN_FIX" | "VERIFIED_BID" | "VERIFIED_FIX" | "WHITELIST_BID" | "WHITELIST_FIX"
  JobState: "DRAFT" | "FINISHED" | "PROGRESS" | "TENDER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  Upload: BackingScalars.Upload
}

export interface NexusGenObjects {
  JobsApplicant: { // root type
    bidPrice: number; // Float!
    jobID: string; // String!
    state: NexusGenEnums['ApplicantState']; // ApplicantState!
    userID: string; // String!
  }
  JobsData: { // root type
    biddingType: NexusGenEnums['BiddingType']; // BiddingType!
    body: string; // String!
    contractAddress?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creatorID: string; // String!
    finishedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    link?: string | null; // String
    price: number; // Float!
    state: NexusGenEnums['JobState']; // JobState!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  UsersProfile: { // root type
    email?: string | null; // String
    id: string; // ID!
    name?: string | null; // String
    wallet: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  JobsApplicant: { // field return type
    bidPrice: number; // Float!
    job: NexusGenRootTypes['JobsData'] | null; // JobsData
    jobID: string; // String!
    state: NexusGenEnums['ApplicantState']; // ApplicantState!
    userID: string; // String!
  }
  JobsData: { // field return type
    applicants: NexusGenRootTypes['JobsApplicant'][] | null; // [JobsApplicant!]
    biddingType: NexusGenEnums['BiddingType']; // BiddingType!
    body: string; // String!
    contractAddress: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['UsersProfile']; // UsersProfile!
    creatorID: string; // String!
    finishedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    link: string | null; // String
    price: number; // Float!
    state: NexusGenEnums['JobState']; // JobState!
    title: string; // String!
  }
  Mutation: { // field return type
    ConfirmJob: NexusGenRootTypes['JobsData']; // JobsData!
    CreateJobsData: NexusGenRootTypes['JobsData']; // JobsData!
    CreateUserByWallet: NexusGenRootTypes['UsersProfile']; // UsersProfile!
    UpdateUserProfile: NexusGenRootTypes['UsersProfile'] | null; // UsersProfile
  }
  Query: { // field return type
    GetUserByID: NexusGenRootTypes['UsersProfile'] | null; // UsersProfile
    GetUserByWallet: NexusGenRootTypes['UsersProfile'] | null; // UsersProfile
    SearchJobsData: Array<NexusGenRootTypes['JobsData'] | null> | null; // [JobsData]
    SearchJobsDataID: NexusGenRootTypes['JobsData'] | null; // JobsData
  }
  UsersProfile: { // field return type
    email: string | null; // String
    id: string; // ID!
    name: string | null; // String
    wallet: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  JobsApplicant: { // field return type name
    bidPrice: 'Float'
    job: 'JobsData'
    jobID: 'String'
    state: 'ApplicantState'
    userID: 'String'
  }
  JobsData: { // field return type name
    applicants: 'JobsApplicant'
    biddingType: 'BiddingType'
    body: 'String'
    contractAddress: 'String'
    createdAt: 'DateTime'
    creator: 'UsersProfile'
    creatorID: 'String'
    finishedAt: 'DateTime'
    id: 'ID'
    link: 'String'
    price: 'Float'
    state: 'JobState'
    title: 'String'
  }
  Mutation: { // field return type name
    ConfirmJob: 'JobsData'
    CreateJobsData: 'JobsData'
    CreateUserByWallet: 'UsersProfile'
    UpdateUserProfile: 'UsersProfile'
  }
  Query: { // field return type name
    GetUserByID: 'UsersProfile'
    GetUserByWallet: 'UsersProfile'
    SearchJobsData: 'JobsData'
    SearchJobsDataID: 'JobsData'
  }
  UsersProfile: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    wallet: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    ConfirmJob: { // args
      id: string; // String!
    }
    CreateJobsData: { // args
      input: NexusGenInputs['JobsDataInput']; // JobsDataInput!
    }
    CreateUserByWallet: { // args
      wallet: string; // String!
    }
    UpdateUserProfile: { // args
      id: string; // String!
      input: NexusGenInputs['UsersProfileInput']; // UsersProfileInput!
    }
  }
  Query: {
    GetUserByID: { // args
      id: string; // String!
    }
    GetUserByWallet: { // args
      wallet: string; // String!
    }
    SearchJobsData: { // args
      query?: string | null; // String
    }
    SearchJobsDataID: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}